import cv2
import imutils
import numpy as np
import pytesseract
import mysql.connector
pytesseract.pytesseract.tesseract_cmd = "C:\\Program Files\\Tesseract-OCR\\tesseract.exe"

# Open the camera
cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)

while True:
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Display the resulting frame
    cv2.imshow('Frame', frame)

    # Wait for the space key to be pressed
    key = cv2.waitKey(1)
    if key == 32:  # space key has a value of 32
        # Process the frame
        img = frame
        img = cv2.resize(img, (600, 400))

        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        gray = cv2.bilateralFilter(gray, 13, 15, 15)

        edged = cv2.Canny(gray, 30, 200)
        contours = cv2.findContours(
            edged.copy(), cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
        contours = imutils.grab_contours(contours)
        contours = sorted(contours, key=cv2.contourArea, reverse=True)[:10]
        screenCnt = None

        # finding contour with 4 sides
        for c in contours:

            peri = cv2.arcLength(c, True)
            approx = cv2.approxPolyDP(c, 0.018 * peri, True)

            if len(approx) == 4:
                screenCnt = approx
                break

        if screenCnt is None:
            detected = 0
            print("No contour detected")
        else:
            detected = 1

        if detected == 1:
            cv2.drawContours(img, [screenCnt], -1, (0, 0, 255), 3)

        mask = np.zeros(gray.shape, np.uint8)
        new_image = cv2.drawContours(mask, [screenCnt], 0, 255, -1,)
        new_image = cv2.bitwise_and(img, img, mask=mask)

        (x, y) = np.where(mask == 255)
        (topx, topy) = (np.min(x), np.min(y))
        (bottomx, bottomy) = (np.max(x), np.max(y))
        Cropped = gray[topx:bottomx+1, topy:bottomy+1]

        img = Cropped
        if img.shape[0] < 200 & img.shape[1] < 150:
            resize = cv2.resize(img, (300, 200), interpolation=cv2.INTER_CUBIC)
        elif img.shape[0] > 300 & img.shape[1] > 200:
            resize = cv2.resize(img, (300, 200), interpolation=cv2.INTER_AREA)
        else:
            resize = img
        blur = cv2.GaussianBlur(resize, (3, 3), 0)
        # cv2.imshow("blur", blur)
        gray = cv2.medianBlur(resize, 3)
        # a, b, c = cv2.split(blur)
        ret, thresh = cv2.threshold(
            blur, 150, 255, cv2.THRESH_OTSU | cv2.THRESH_BINARY_INV)
        # cv2.imshow('Otsu', thresh)
        rect_kern = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
        # apply dilation
        dilation = cv2.dilate(thresh, rect_kern, iterations=1)
        # cv2.imshow("dilation", dilation)

        # text = pytesseract.image_to_string(Cropped, config='--psm 11')
        read_text = pytesseract.image_to_string(
            Cropped, config='-c tessedit_char_whitelist=0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ --psm 8 --oem 3')
        # print(" Plate Recognition\n")
        text = read_text.strip()

        print("Number Plate Detected:", text)

        # Define the value to insert
        number_p = [text]

        # connection
        mydb = mysql.connector.connect(
            host="localhost",
            user="root",
            password="",
            database="number_plate"
        )

        # Create a cursor object
        my_cursor = mydb.cursor()

        sql = "SELECT * FROM vehicle_plate WHERE number_p = %s"
        val = number_p

        # Execute the query
        my_cursor.execute(sql, val)

        # Get the results
        results = my_cursor.fetchall()

        # Check if any rows were returned
        if len(results) > 0:
            print("Number Plate is already exists in our database...Open the Gate")
        else:
            print("Number Plate is not present in our database...Please Register in Database")
            # Define the SQL query to insert the data into the database
            sql = "INSERT INTO vehicle_plate (number_p) VALUES (%s)"
            val = number_p

            # Execute the query
            my_cursor.execute(sql, val)
            print("Number Plate Registerd in Our Database...")

            # Commit the changes to the database
            mydb.commit()

            # Close the cursor and database connections
            my_cursor.close()
            mydb.close()



